name: dev ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  REPOSITORY_NAME: ams-regulator-reporting-fe
  ARGOCD_REPO_NAME: tespkg/ams-regulator-reporting-fe-argocd
  NS: dev-meeraspace-prime
  CI_REGISTRY_IMAGE: ams-regulator-reporting-fe
  GITLAB_IMAGE_NAME: "registry.gitlab.com/target-digital-transformation/fe-apps/ams-regulator-reporting-fe/github:${GITHUB_SHA::8}"

jobs:
  build_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '10'

      - name: Build the Docker image
        run: |
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ secrets.CR_USER }} --password-stdin
          echo ${{ secrets.GITLAB_CR_PAT }} | docker login registry.gitlab.com -u ${{ secrets.GITLAB_CR_USER }} --password-stdin
          GITLAB_IMAGE_NAME="registry.gitlab.com/target-digital-transformation/fe-apps/ams-regulator-reporting-fe/github:${GITHUB_SHA::8}"
          docker build -t $GITLAB_IMAGE_NAME --build-arg NPM_AUTH_TOKEN=${{ secrets.NPM_AUTH_TOKEN }} .
          docker images
          docker push $GITLAB_IMAGE_NAME


  deploy_to_dev:
    runs-on: ubuntu-latest
    needs:
      - build_test
    steps:
      - name: Display the repository name
        run: echo "$REPOSITORY_NAME , $ARGOCD_REPO_NAME"
        shell: bash

      - name: Setup User and email for GIT next push
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name ${{ github.actor }}
          git config -l

      # - name: Checkout tests
      #   env:
      #     REPO_ACCESS_TOKEN: ${{ secrets.DOCKER_AUTH_TOKEN }}
      #   run: git clone -b master https://$REPO_ACCESS_TOKEN:x-oauth-basic@github.com/tespkg/ams-regulator-reporting-fe-argocd.git ams-regulator-reporting-fe-argocd

      - name: Display the current folders
        run: |
          pwd
          ls

      - name: Clone Deployment Manifests Repo
        uses: actions/checkout@v2
        with:
          repository: tespkg/tes_manifests
          token: ${{ secrets.TES_MANIFEST_TOKEN }}
          path: tes_manifests

      # - name: Push to ArgoCD
      #   env:
      #     tag: ${GITHUB_SHA:0:8}
      #   run: |
      #     cd ams-regulator-reporting-fe-argocd
      #     cd helm/0-0-dev-gke-dev/ams-regulator-reporting-fe
      #     sed -i '/repository:/c\    repository: docker.pkg.github.com/tespkg/ams-regulator-reporting-fe/ams-regulator-reporting-fe:'"${GITHUB_SHA:0:8}" values.yaml
      #     git diff
      #     git add values.yaml
      #     git commit -m "Update Values yaml"
      #     git push
      - name: Update Images via yq
        shell: bash
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          MAIN_REPO=$(pwd)
          cd $MAIN_REPO
          cd tes_manifests/env-dev/front-end-apps-ams-regulator-reporting-fe
          echo "list current common*.image.repository"
          yq r --printMode pv values.yaml "common*.image.repository"
          echo "latest GITLAB_IMAGE_NAME is registry.gitlab.com/target-digital-transformation/fe-apps/ams-regulator-reporting-fe/github"
          yq w -i values.yaml common*.image.repository registry.gitlab.com/target-digital-transformation/fe-apps/ams-regulator-reporting-fe/github
          yq r --printMode pv values.yaml "common*.image.repository"

          echo "list current common*.image.tag"
          yq r --printMode pv values.yaml "common*.image.tag"
          echo "latest GITLAB_IMAGE_TAG is ${GITHUB_SHA::8}"
          yq w -i values.yaml "common*.image.tag" ${GITHUB_SHA::8}
          yq r --printMode pv values.yaml "common*.image.tag"

      - name: Push manifests changes to ArgoCD's manifest repo
        run: |
          if [ "$CHANGED_PROJECTS" != "" ]; then
            cd tes_manifests
            git config user.name ${GITHUB_ACTOR}
            git config user.email ${GITHUB_ACTOR}@github.com
            git diff
            git add .
            git commit -m "${GITHUB_REPOSITORY}_${GITHUB_JOB}_${GITHUB_SHA:0:7}_details:${CI_COMMIT_MESSAGE}"
            git push
          fi
  deploy_to_test:
    runs-on: ubuntu-latest
    needs:
      - deploy_to_dev
    steps:
      - name: TO DO
        run: echo "Deploy to test server to-do"
        shell: bash
